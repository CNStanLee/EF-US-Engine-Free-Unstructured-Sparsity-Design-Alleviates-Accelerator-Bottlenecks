-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity MVAU_hls_1_Matrix_Vector_Activate_Batch_weights_32_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 31; 
             AddressWidth     : integer := 6; 
             AddressRange    : integer := 45
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of MVAU_hls_1_Matrix_Vector_Activate_Batch_weights_32_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "1111101111111010000001000000000", 1 => "0000000000000001110000011111110", 2 => "0000010000001100000000000000000", 3 => "0000000000100010001101000010111", 
    4 => "1111111000000000000000000000000", 5 => "1110010000000000000100000001011", 6 => "0010110111101111110001100000000", 7 => "1101110111010111110001100010001", 
    8 => "0000000000000001110010011101001", 9 => "0010010000110101111011000000000", 10 => "0000000000000000000000000000000", 11 => "0001000111101100000000011111001", 
    12 => "0000000111110011110101100000000", 13 => "1011111000011000000001100000110", 14 => "0000000000001001101000000000000", 15 => "0000111111111000000000000000000", 
    16 => "0010011000000000000000000010011", 17 => "1101110000000001101101000000000", 18 => "0000000000000000000000000000000", 19 => "0000000000000001111100000000000", 
    20 => "0000000000101100000101100000000", 21 => "0010000111010100000000000000000", 22 => "0000000111110111100111000000000", 23 => "0000000000000010000000000000000", 
    24 => "0000000000110000000000000000000", 25 => "1110000000011110001100000010011", 26 => "0010001111101101111010111011111", 27 => "0000000000000001100101100000000", 
    28 => "0000100000011010001101100000111", 29 => "0100010000110010000000000000000", 30 => "0011101000000000000000000000000", 31 => "0000000000100010000000000011100", 
    32 => "0010001000011011110100100101010", 33 => "0011110000001010001100100000000", 34 => "0000000111010100000000000000000", 35 => "1100100000000001110011111101110", 
    36 => "0000000111001100000010011110101", 37 => "0001110000000001110101011110001", 38 => "0000000000000001111101000000000", 39 => "0000011000100110000000011110101", 
    40 => "0000000000000000000000000000000", 41 => "0001101111011001111011111010100", 42 => "0000000110010011111010111001101", 43 => "1011100111011111111101111101000", 
    44 => "1110010000000001110001000000101");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

