-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity MVAU_hls_1_Matrix_Vector_Activate_Batch_weights_1_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 31; 
             AddressWidth     : integer := 6; 
             AddressRange    : integer := 45
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of MVAU_hls_1_Matrix_Vector_Activate_Batch_weights_1_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "0000000000000001110101111110110", 1 => "1100000000010111111101000000000", 2 => "0000000000101110000000000101101", 3 => "0000011111111111111111100000000", 
    4 => "0001001000000000010000111111111", 5 => "0000000000000000000000011011101", 6 => "0000000000100001110111100000000", 7 => "1111111000011110000000000000000", 
    8 => "0001001111110000000000000000000", 9 => "0001101000010110000101000000000", 10 => "0000000111101010000000000000000", 11 => "1111101000000001110000100000000", 
    12 => "0000000000000000000000000000000", 13 => "0000000000000000000101100000000", 14 => "0010100000100100000110100010100", 15 => "0000000000000000000100000000000", 
    16 => "0000000000000001111000100011100", 17 => "1100011000000001111110111110010", 18 => "0000000000000001111100000000010", 19 => "0000000000010100000000011111100", 
    20 => "0000000000000000000000000001010", 21 => "0000000000000001110101000010111", 22 => "0000000000011101110110000100101", 23 => "0000100000000000000101111111110", 
    24 => "1111001111110000000011000000000", 25 => "0010010000010100000000011111100", 26 => "1111000000101101110011011110010", 27 => "1110011111110010000000000001000", 
    28 => "0000010000010110000101100000000", 29 => "0100001111011110001100100000000", 30 => "0000010000000101111011100000101", 31 => "1101000000000000000010100001101", 
    32 => "0000000000000001111000100011101", 33 => "1110001000000000000000000000000", 34 => "0000000111101111111001100000000", 35 => "0001010000000000000000000000000", 
    36 => "1111111000000001110011111011110", 37 => "1101100111010011110011000011110", 38 => "0000000000001000000000000000001", 39 => "0000000000000000000010100001100", 
    40 => "0000000111101010000000000000000", 41 => "0000000000000001110111011101010", 42 => "0000011000000001101110000000000", 43 => "0000111000000000001111100000000", 
    44 => "0000000000000000000000011111010");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

