-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity MVAU_hls_1_Matrix_Vector_Activate_Batch_weights_20_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 31; 
             AddressWidth     : integer := 6; 
             AddressRange    : integer := 45
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of MVAU_hls_1_Matrix_Vector_Activate_Batch_weights_20_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "0000000000000000001110100001111", 1 => "0010010000000000000000000010010", 2 => "0000100000000111111000000100011", 3 => "0000000000000001111011100000000", 
    4 => "0000000000000001101110100001000", 5 => "0001000000000000000011100001100", 6 => "0011101000010110000000000010010", 7 => "1110110000001110000000000000000", 
    8 => "0010100000000111110100000001010", 9 => "0000000000001110001011011101011", 10 => "1100101111101000000000011110111", 11 => "0000000000100101111100000000000", 
    12 => "0000000000101000000000011101101", 13 => "0100000111001101111010100001100", 14 => "0011001000000000010001111101000", 15 => "1101111111001110000000000000000", 
    16 => "0001000000000000000000011101110", 17 => "0000000000000000000000011111001", 18 => "0001100111001001110000011101111", 19 => "0010000000000000000000011011111", 
    20 => "1111000000000001110010100000000", 21 => "0000000000000000000000000000000", 22 => "0000000000010001111111011100011", 23 => "0101001101101011111000100000000", 
    24 => "0010001000000000001101011111111", 25 => "0000000000000001101100000000000", 26 => "1101011000000010000000011101010", 27 => "1100100111100110000110100000000", 
    28 => "1111000000000000010011011110110", 29 => "1011101111011101110101100000000", 30 => "0001111000000001101101011100111", 31 => "1101000001001110000000011100110", 
    32 => "0000000111001000000000011111001", 33 => "1100011111100011111110111101110", 34 => "1110000111101011111011111110100", 35 => "0000000000000001101101100000000", 
    36 => "1101101000000000000000011101110", 37 => "0000000111011110001001011111010", 38 => "0000000111110000001010000000000", 39 => "0000000111110101110111011111100", 
    40 => "1111101000010010000101100000000", 41 => "0000000000010100000000000010010", 42 => "0000000000000100000001000100100", 43 => "0000000000000010000000011101110", 
    44 => "0000000001000001110111100000000");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

