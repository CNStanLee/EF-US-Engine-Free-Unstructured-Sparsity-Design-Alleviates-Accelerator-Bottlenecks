-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity MVAU_hls_1_Matrix_Vector_Activate_Batch_weights_4_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 31; 
             AddressWidth     : integer := 6; 
             AddressRange    : integer := 45
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of MVAU_hls_1_Matrix_Vector_Activate_Batch_weights_4_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "1110010111110011110101111100101", 1 => "1100110001011000000011111001111", 2 => "0001001110110110000000011101110", 3 => "1011000111110110001011100000000", 
    4 => "1111101000000101111100100000000", 5 => "1111100111101011110001011101011", 6 => "0000000000010111110111000000000", 7 => "1100111000000110000000011100011", 
    8 => "0001101000000000000000000000001", 9 => "0000000110110110000000000000010", 10 => "0000000111110100000000000000001", 11 => "0010100000000001101100011111111", 
    12 => "1011101000011110000000011111010", 13 => "0010100000001001111111000010111", 14 => "0001000000000000001001111110001", 15 => "0001111111111111111101000001000", 
    16 => "0000000000110110000000000000000", 17 => "0000000000000000000000011111100", 18 => "0000000000000000000000000000000", 19 => "1110110111011100001011000000000", 
    20 => "0000000000000000000000000000000", 21 => "0000000000000001111011100010100", 22 => "1010011000000000000000000000000", 23 => "0001110111110110000000000010001", 
    24 => "0000000111101110000010011101010", 25 => "0000000111100010000000011110001", 26 => "0001101111110000000000000000000", 27 => "1100011000101110000000000000000", 
    28 => "0011010000010100000000000000000", 29 => "0000000000000000001010111101110", 30 => "0001100000000000000001111111110", 31 => "0000000000110001111000000011000", 
    32 => "1011001001001000000000000000000", 33 => "0011101000000001111100000011000", 34 => "0000000111011110000000011011110", 35 => "1111010000000000000000011110001", 
    36 => "0010100111101100000000000001010", 37 => "1011010000011100001110100000000", 38 => "0001011111100110000000000000000", 39 => "0000000000011110000000100000000", 
    40 => "1111100000000000000000011110001", 41 => "0000000001000110000000000010000", 42 => "1000111001000000000000011110100", 43 => "0001001111101001100101100001000", 
    44 => "0000111000011000011011011100100");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

