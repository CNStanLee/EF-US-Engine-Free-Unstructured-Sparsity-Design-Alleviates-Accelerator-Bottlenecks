-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity MVAU_hls_1_Matrix_Vector_Activate_Batch_weights_18_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 31; 
             AddressWidth     : integer := 6; 
             AddressRange    : integer := 45
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of MVAU_hls_1_Matrix_Vector_Activate_Batch_weights_18_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "0101100000000000000101000010011", 1 => "0000000000000001111001000101101", 2 => "1001110001010101110110100100101", 3 => "0000000000010100001000100000000", 
    4 => "1101111111110100001010000001010", 5 => "1111100111010001110100111110100", 6 => "1101001111101010000111100000000", 7 => "1111100000000000000100100000000", 
    8 => "1101110000000000000000011111010", 9 => "0110110111000110000100011110000", 10 => "0000000111101011111011100000000", 11 => "0000000000011001110101011111010", 
    12 => "0000000000000000001010011100001", 13 => "0000000000000000000000000000000", 14 => "1011000000000000000000000000111", 15 => "0000000000001010000011100001000", 
    16 => "0010011000000001111011000001100", 17 => "0000100000000000000000000000000", 18 => "1110100000000001111111011101000", 19 => "0000000111111000000000000010101", 
    20 => "0001011000010000000000000000100", 21 => "1111001000001010000000000001000", 22 => "0000000000011100000000000010001", 23 => "0000000000001100001100000000111", 
    24 => "1011000110111110000000000000000", 25 => "0010111000000001110110100000000", 26 => "0000000000000001110011100000000", 27 => "1101011000001010000000000000000", 
    28 => "0010000000000000010000100010010", 29 => "0000000111011100000000100000000", 30 => "0001110000000000000000011110100", 31 => "0000000000000001111010011011111", 
    32 => "1010001000000000000000011101110", 33 => "1100000000000000000000000000001", 34 => "0000000110100101110001100000000", 35 => "0000000000000000000000000000000", 
    36 => "0000000000000001111011000000000", 37 => "1100000111111000000000011111100", 38 => "1110011000000001111111100000000", 39 => "1101101110111001110011000000000", 
    40 => "0000000000000000000000000001010", 41 => "0000000000001001111000100000110", 42 => "0000000000000001101100000001011", 43 => "0000000000000000000000000000000", 
    44 => "0000000000000000000000000000010");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

