-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity MVAU_hls_1_Matrix_Vector_Activate_Batch_weights_16_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 32; 
             AddressWidth     : integer := 6; 
             AddressRange    : integer := 45
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of MVAU_hls_1_Matrix_Vector_Activate_Batch_weights_16_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "11101100110110000000000111111100", 1 => "00010100111011100000000000000000", 2 => "00000000111100000000000000000000", 3 => "00000000111001110000000011010000", 
    4 => "11100001000101101111111100000000", 5 => "11101001110010111110100111101101", 6 => "11100001000100000000000011110110", 7 => "00000000111010110000000000001011", 
    8 => "11100000111110010000000011010011", 9 => "00000000000000001110010000000000", 10 => "11110001111100011100101011010110", 11 => "00000000110101000001000000000100", 
    12 => "00000000111100000000000000000000", 13 => "11101010000000001111111111010111", 14 => "00100111001011011110011000000000", 15 => "00000000000000000000000000000000", 
    16 => "00000000000000000000000000000000", 17 => "00000000000000001111001100010000", 18 => "00000101000000000010010100001001", 19 => "00001001000000000000111000000000", 
    20 => "11110100111110011111001000000000", 21 => "00000000000100011111001111101101", 22 => "11111111000000000000000000011010", 23 => "00011011000000000001000000000000", 
    24 => "00000000000000000000000000000000", 25 => "00000000000101100000010100011001", 26 => "11110001000000001111000000000000", 27 => "00001101000000000000000000011011", 
    28 => "11110010000010110001000111111000", 29 => "10110001110000011100110000000000", 30 => "00000000000000000000111100010110", 31 => "00001101111111010000000011110100", 
    32 => "00000000000000001110101011011100", 33 => "00011000111100100000000100000000", 34 => "00010100000110110000000000000000", 35 => "00000000000000101111111100000000", 
    36 => "00001110000000000000000011110010", 37 => "00000000111101001111011111011100", 38 => "00010011111101001111100100000000", 39 => "11111011000100010000000000000000", 
    40 => "00000000000111010000000000001100", 41 => "00000000000101110000000011101100", 42 => "00000000111000110000000011110101", 43 => "00011111111110011101101100010010", 
    44 => "00010011000110100000000000000000");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

