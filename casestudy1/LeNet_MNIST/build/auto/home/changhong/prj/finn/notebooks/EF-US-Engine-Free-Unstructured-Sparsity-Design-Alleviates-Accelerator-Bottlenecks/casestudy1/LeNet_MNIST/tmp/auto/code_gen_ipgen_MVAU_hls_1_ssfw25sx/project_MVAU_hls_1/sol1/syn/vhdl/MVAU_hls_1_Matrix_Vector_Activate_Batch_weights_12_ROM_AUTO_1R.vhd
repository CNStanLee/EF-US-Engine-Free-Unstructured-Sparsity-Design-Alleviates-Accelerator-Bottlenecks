-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity MVAU_hls_1_Matrix_Vector_Activate_Batch_weights_12_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 31; 
             AddressWidth     : integer := 6; 
             AddressRange    : integer := 45
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of MVAU_hls_1_Matrix_Vector_Activate_Batch_weights_12_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "1111001000000001110100111111000", 1 => "0000000000000000000000000000000", 2 => "0000000111011011110100100000000", 3 => "0000110111010100000000000000000", 
    4 => "0100010000101100000000000000000", 5 => "0000000111111000000011011101101", 6 => "0000000000000001110110011011111", 7 => "0000000111100001110110000001000", 
    8 => "0000000111100100000000000000000", 9 => "0001010000110001110100000000000", 10 => "0000000000000000000000000000000", 11 => "0000000000000001111100000000000", 
    12 => "0000000000000100001011100000000", 13 => "1111001111110100000000000000000", 14 => "1100011000000000000001000001001", 15 => "1111101111111000000000000000000", 
    16 => "1111010111110000000000000000000", 17 => "0011001000000001110101100000000", 18 => "0000000111000110000111011101111", 19 => "1111011111010110000110111111100", 
    20 => "0010111000000001110101011110100", 21 => "1110000000110101111001111110100", 22 => "0000000000101110000010100000000", 23 => "0000000000000000001011000001010", 
    24 => "0000000111010010000111100000111", 25 => "0011111000000000000000011111100", 26 => "0000000111101101101100000000000", 27 => "1011110000001010000101011101000", 
    28 => "0010001000000000001001000001111", 29 => "0000100110111010010010100001101", 30 => "0000000111011011111000111111011", 31 => "1011111000011101111000000000000", 
    32 => "0000000000000000000111000100001", 33 => "0000000000000000001000100000011", 34 => "0000000110110010000010100000000", 35 => "0011010110111110000000000000000", 
    36 => "0001111000110011111000100001110", 37 => "1100001000110001101101011101111", 38 => "0101100111111100001110100000000", 39 => "0001110000000000001011011100100", 
    40 => "0000000111100001110001000000110", 41 => "0001100111110100000000000010000", 42 => "0010000000000000000000011101000", 43 => "0000110111000101110111000000000", 
    44 => "0010000000000000000000011101011");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

