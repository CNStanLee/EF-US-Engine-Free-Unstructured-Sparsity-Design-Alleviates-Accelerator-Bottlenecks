-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity MVAU_hls_1_Matrix_Vector_Activate_Batch_weights_46_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 31; 
             AddressWidth     : integer := 6; 
             AddressRange    : integer := 45
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of MVAU_hls_1_Matrix_Vector_Activate_Batch_weights_46_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "0000101111100010000000011111111", 1 => "0000110111100100000110011011100", 2 => "0000000111001100000000011111011", 3 => "0000000111100000000000000001000", 
    4 => "0011111000111000000000000000000", 5 => "0000000000000001111010100000000", 6 => "1010111000000001110110011101011", 7 => "0000000111101100000000011111010", 
    8 => "1100111000010100000000000000000", 9 => "1101011000000000000000000000000", 10 => "0000000000000000000000000001010", 11 => "0000000000011001101110111101010", 
    12 => "1100100111010010001000000000000", 13 => "0000000000000000010100000000000", 14 => "0000101111001010000000000001100", 15 => "0010111000000001110001011101011", 
    16 => "1101000000100011111011111111011", 17 => "0000000000000000001001000000000", 18 => "0000000111010100001110000000000", 19 => "1110101110111100010101000000000", 
    20 => "0011100111110100000000011110110", 21 => "1111010000111101100110011111111", 22 => "1011100000110000000110011100001", 23 => "0100010000011000001101100010101", 
    24 => "0000000111011000010000000000000", 25 => "0000001000000001111110100010100", 26 => "0001011000000000000000011110111", 27 => "1101110111111111110101011111110", 
    28 => "0001101111010011110001100001000", 29 => "0000000000010010000000100000000", 30 => "0001110111010100000000000000000", 31 => "0000000000000001110110100100101", 
    32 => "1111100000000001101110100000000", 33 => "0010011000000000000101100001110", 34 => "0100100000000010001110000000000", 35 => "0000000111100001111001000000000", 
    36 => "0000000111101101110111100001110", 37 => "1101011000111011111011100000000", 38 => "0010110000000000000000000000000", 39 => "0000000000110000000010111101000", 
    40 => "0000000000000001111011100000000", 41 => "1111010000000000000000000000000", 42 => "1101100000100001110001100000000", 43 => "0000000000000000000000000000000", 
    44 => "1101010000000000000000000000001");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

