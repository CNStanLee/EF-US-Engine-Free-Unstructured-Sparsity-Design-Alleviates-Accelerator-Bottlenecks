-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity MVAU_hls_1_Matrix_Vector_Activate_Batch_weights_43_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 31; 
             AddressWidth     : integer := 6; 
             AddressRange    : integer := 45
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of MVAU_hls_1_Matrix_Vector_Activate_Batch_weights_43_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "1111011111100110000000000000000", 1 => "1101010111110000000000000010000", 2 => "0000000000111010000000011001111", 3 => "0000000000001111101110000000000", 
    4 => "0000000000000001111111011111100", 5 => "0000000000001111111001000000000", 6 => "1011100000000000000000000000000", 7 => "0001110000010100000000011100111", 
    8 => "1100011000000011110111111111000", 9 => "1001111111101010000100100001001", 10 => "0000000000000000000000100000000", 11 => "0000000111111000000000000000000", 
    12 => "0000000000000000010010000000000", 13 => "0011111000000000000000000000000", 14 => "1011110110101110000111100000000", 15 => "0010000000000000000000000000000", 
    16 => "1011001000000000000000000000000", 17 => "1111000000000000000000011111010", 18 => "1000110111011100000000000000000", 19 => "1011010000000000000000000000000", 
    20 => "0000000000011110000000000010101", 21 => "1111110000000000001011111100000", 22 => "0000000000100110001000111100111", 23 => "0000000000000110000000000010110", 
    24 => "0000010110110111111000100000000", 25 => "0001101111010000000111011110110", 26 => "1111101000101011101101111111110", 27 => "1100000000010100000000000000000", 
    28 => "0010010000011100000000000011001", 29 => "1111011110100000001000000000000", 30 => "0000100000000001111110100000000", 31 => "1101001000000100000000000000101", 
    32 => "1110101111010100001011011111010", 33 => "1011110000001100000000011111000", 34 => "1101110000000000000000000000000", 35 => "0011011000101000000000011111010", 
    36 => "0000000111110110000000000000000", 37 => "1110011111110100000000000000001", 38 => "1110011000010000000000000000000", 39 => "1100001111101111111110100000000", 
    40 => "0000111000000000000000000000000", 41 => "0000000000000001111001000010100", 42 => "0000001000000000000000000000000", 43 => "0000000000000001110101011111000", 
    44 => "1110110111010110000000000001001");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

