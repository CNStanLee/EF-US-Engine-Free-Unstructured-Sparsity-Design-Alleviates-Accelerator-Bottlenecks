-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity MVAU_hls_1_Matrix_Vector_Activate_Batch_weights_25_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 32; 
             AddressWidth     : integer := 6; 
             AddressRange    : integer := 45
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of MVAU_hls_1_Matrix_Vector_Activate_Batch_weights_25_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "00000000000000000000000000000000", 1 => "11100111000011101101110000001110", 2 => "11100110111110010000000000000001", 3 => "00000000000000000000000000010110", 
    4 => "00000101111111000010011100001000", 5 => "11111100000000001110110100000000", 6 => "00000101000101011101101000001010", 7 => "11110011111101100000000011101111", 
    8 => "00101000000000000001111100010101", 9 => "00010001111000100001010000000110", 10 => "00010100000000000000000011101100", 11 => "00000000000110001111001011110100", 
    12 => "11100100000000000000000011101011", 13 => "00011110000000000000000000000100", 14 => "00010100000000000000100000000000", 15 => "00000000111110010000000000000000", 
    16 => "00000000000000110001101011111101", 17 => "10111001000010101110000000000000", 18 => "00000000000000101111001100000110", 19 => "11101100111101000000010111110000", 
    20 => "00000000000000000000000000000000", 21 => "00001011000000000000000000000100", 22 => "11101110111000110000000000000000", 23 => "11111110000000010000000000000000", 
    24 => "00000110000000001101100011111001", 25 => "10110110000000000001010000000000", 26 => "11111111111000100000000011111010", 27 => "00000111000000001110100100011000", 
    28 => "00000111000001000000100100000000", 29 => "11111000000100100000001111101111", 30 => "00000000000000000001000000000000", 31 => "00000000110110000000000000000000", 
    32 => "00000000000001000000110100100011", 33 => "00000000000000001101111100000000", 34 => "00001001000011011110100100000000", 35 => "11110001000001110000111000001101", 
    36 => "00000000111001000000000000000101", 37 => "11101110000000000000000000100010", 38 => "00000000000000000000000011110111", 39 => "00011000000000001111001000000000", 
    40 => "11011111000001010001010000001001", 41 => "00000000111100101111100100000000", 42 => "11011111000000001101010100100001", 43 => "11101001000001011110110000000000", 
    44 => "00010101000000000000000000001101");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

