-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity MVAU_hls_1_Matrix_Vector_Activate_Batch_weights_27_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 31; 
             AddressWidth     : integer := 6; 
             AddressRange    : integer := 45
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of MVAU_hls_1_Matrix_Vector_Activate_Batch_weights_27_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "1110111111101110000000111111100", 1 => "0000000000000001111101111101110", 2 => "0000000111010000000000000000000", 3 => "1001100000000010000000011110101", 
    4 => "1110100000000001100011011111000", 5 => "0000000000010110000000000000000", 6 => "1101101000000000001011000000000", 7 => "0000000110010100000000000000111", 
    8 => "1001110000000000000000011110011", 9 => "1101000111011001011110100000000", 10 => "0100000000000000000000011101010", 11 => "0000000000000000000000011100101", 
    12 => "1001100111011100000010111001010", 13 => "0010001000000100000011000000000", 14 => "0000010111111000000000100000000", 15 => "0000000000000000000000011111100", 
    16 => "1011111000000000000000011111000", 17 => "0000000000000000000000011111111", 18 => "1010010000000000000100000000000", 19 => "1100110111101101110101100000010", 
    20 => "0000110000101110000000000000000", 21 => "1111110000000000000000011101001", 22 => "1110001000000000000000000000000", 23 => "0000000000000000000000000010010", 
    24 => "0000000111011010000000000010010", 25 => "0000000000000000000001100001111", 26 => "0000000000000001110000111110111", 27 => "1110001000000101110110011111000", 
    28 => "0001111000000000000000000010011", 29 => "1111100000011000000111011100011", 30 => "0000111000110001111111100010110", 31 => "0010000001000010000000000000000", 
    32 => "0000000000000000000000011101010", 33 => "0011001000011100001010000100001", 34 => "0100010000100110000110000000000", 35 => "0000000000000000000011100000000", 
    36 => "0000000000000001111101011111000", 37 => "0000000000000000000000000000111", 38 => "0000000000000001101110100010000", 39 => "1110101000001100000000011110010", 
    40 => "0000000111101100000101000001011", 41 => "0011011000000000000000000000000", 42 => "0010000000101101111101111101110", 43 => "0011101000001011110101100001001", 
    44 => "0000000000000000000000011100110");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

