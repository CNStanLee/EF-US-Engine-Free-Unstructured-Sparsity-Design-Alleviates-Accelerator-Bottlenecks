-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity MVAU_hls_1_Matrix_Vector_Activate_Batch_weights_11_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 31; 
             AddressWidth     : integer := 6; 
             AddressRange    : integer := 45
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of MVAU_hls_1_Matrix_Vector_Activate_Batch_weights_11_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "1110101000011110000000000010010", 1 => "0000000111100001111001100001000", 2 => "1110111000000001100100000111111", 3 => "0000000000000000000110000000000", 
    4 => "0001011000101001110101000000000", 5 => "1101011111101101111110100000011", 6 => "1111001111100100000000000001001", 7 => "1011010000001111110001000011111", 
    8 => "1101001000001110011001111111100", 9 => "0000000111100110000000000001111", 10 => "0000000110111011111101111100101", 11 => "1011100000000000000011000000000", 
    12 => "0000000111110100000011100001110", 13 => "1101010000001110001001000000011", 14 => "0000000000000000001001000000111", 15 => "0000000000000001111011011110100", 
    16 => "0010110000100000000000011100110", 17 => "0010100000000000000000011100110", 18 => "0000000111110110010011011110001", 19 => "0000000000011100000000000010011", 
    20 => "1111001000000000000111000010010", 21 => "0001001000000001110100011111111", 22 => "0000000000000000000000000000000", 23 => "1111111111110001111011111110110", 
    24 => "0000000000010110000000000000000", 25 => "0001011000000110000000000000100", 26 => "1101101000000001111001100000000", 27 => "0000000000011000000000000101001", 
    28 => "0000000000001110000000000000000", 29 => "0000000000000001110100100001111", 30 => "1111101000001100000000000001110", 31 => "0000000000101101110010100000000", 
    32 => "0001101111110001111011011110111", 33 => "0010111000000000000000000000000", 34 => "0001100111001010001000100000000", 35 => "0000000111110101111100100001010", 
    36 => "0000000000000001110010100000000", 37 => "0000000000000000000000100000000", 38 => "0001110000101000000000011111111", 39 => "1110111000000001111000100000101", 
    40 => "0000000001000000001010000000000", 41 => "1111110111111110000000000000000", 42 => "0000000110011000000000000010010", 43 => "0000000000010001110010000000000", 
    44 => "1111110111101011101101100011010");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

