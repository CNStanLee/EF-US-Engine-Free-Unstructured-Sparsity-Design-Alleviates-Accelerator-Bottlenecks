-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity MVAU_hls_1_Matrix_Vector_Activate_Batch_weights_26_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 31; 
             AddressWidth     : integer := 6; 
             AddressRange    : integer := 45
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of MVAU_hls_1_Matrix_Vector_Activate_Batch_weights_26_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "0000000000000001111011011100110", 1 => "0010100000000000000000011110011", 2 => "0000000111101010000000000000000", 3 => "0010011111100110000000011111010", 
    4 => "0011001000101100000000011111100", 5 => "1110111000011110000010100000000", 6 => "0100111000000000001000000000000", 7 => "0000000111101001110111100000000", 
    8 => "0000000111001101110001000000000", 9 => "0100111000110110000000000000000", 10 => "1111011000000110000000000000000", 11 => "0000000111111100000000011111010", 
    12 => "1101010000000000000000011010111", 13 => "0000000000000001111101000001100", 14 => "0011111000000000000000011100100", 15 => "1101011111101000000000000000011", 
    16 => "1100110111101100000010100000000", 17 => "0000000000000001110001100011000", 18 => "1101001000000000010100100000000", 19 => "0000000000000001110101000000000", 
    20 => "1001011000000001111011000010101", 21 => "1101010000000000000100011110100", 22 => "0001101000000001101010000011001", 23 => "1100100000000000001101111101001", 
    24 => "0000000000000001110111100000000", 25 => "1101001110110000000000011100101", 26 => "1111100111001110000000000000000", 27 => "0000000111100000000000000000000", 
    28 => "1110110000000000000000011110101", 29 => "1111011001000000000001111111101", 30 => "1111110000010100000100000001000", 31 => "0010110000100000000000011101111", 
    32 => "0010010111101011111111000000100", 33 => "0001111000000000000101100010100", 34 => "0000000000010001110101000001111", 35 => "0000000000010110000011100001100", 
    36 => "0000000000000000000000000000000", 37 => "0000000000000001111101100010101", 38 => "0001101000000001111111100000000", 39 => "0000000000000001111011000000100", 
    40 => "1100101000001010000101100010010", 41 => "1100011111111100000000000000000", 42 => "0000000000011001110101000011001", 43 => "1110010000001000000000000000000", 
    44 => "1100101101111101101100000011010");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

