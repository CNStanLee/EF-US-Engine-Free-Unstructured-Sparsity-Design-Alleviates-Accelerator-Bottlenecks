-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity MVAU_hls_1_Matrix_Vector_Activate_Batch_weights_8_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 31; 
             AddressWidth     : integer := 6; 
             AddressRange    : integer := 45
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of MVAU_hls_1_Matrix_Vector_Activate_Batch_weights_8_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "0000000000010101110111000000000", 1 => "1100101000000000000000000000000", 2 => "0010000110101000000000011110001", 3 => "1011111000000001101111100000000", 
    4 => "1100110000000010000000000000000", 5 => "0100001000111010000000000000000", 6 => "0000000000000000000000000000000", 7 => "0000000111110000000000011011011", 
    8 => "0000000000000000000000000000000", 9 => "1101011111111000000001000000000", 10 => "0000000000000000000000000000000", 11 => "0010101000000000000001111111011", 
    12 => "0000000000000000001110000000000", 13 => "0000000001010100000000000110111", 14 => "0100001000100100000000000100100", 15 => "0000000000000000000000011111101", 
    16 => "1101011000000000000000000000001", 17 => "0011000000000000000000000010110", 18 => "0000011000000001111111100000000", 19 => "1110100111100111111011000001111", 
    20 => "0000000000000000001001000000011", 21 => "0000000000000000000111000000000", 22 => "1111100000000000000000000001010", 23 => "0000000000000000000000000000000", 
    24 => "0000111111010100000000000000000", 25 => "0000000000100100000000000000000", 26 => "0011111001011010000001000000000", 27 => "0001100000111111111110100001001", 
    28 => "0000000000011010000000000000000", 29 => "0010011000100000000111000000000", 30 => "0010110000101100000000011111011", 31 => "0000000000000000000011011101111", 
    32 => "0011100000000000000000000000000", 33 => "0001111000100010000000000001010", 34 => "0011110000000110000000000000000", 35 => "0000000000001110000110000010000", 
    36 => "0001110000000001111101100001001", 37 => "1110011000000000000000000000000", 38 => "0000000000000000000000000000000", 39 => "0000000111110100000000000000001", 
    40 => "1111000111110000000000000001001", 41 => "0000000000010010000000000010010", 42 => "0010110000011001111111100100000", 43 => "0101010000110110000100000001010", 
    44 => "0011000000011110000000011111010");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

