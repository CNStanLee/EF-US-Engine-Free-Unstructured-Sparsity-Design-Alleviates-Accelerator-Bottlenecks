-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity MVAU_hls_1_Matrix_Vector_Activate_Batch_weights_48_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 31; 
             AddressWidth     : integer := 6; 
             AddressRange    : integer := 45
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of MVAU_hls_1_Matrix_Vector_Activate_Batch_weights_48_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "1101111110111101110111000000000", 1 => "1101010111001000000100100010111", 2 => "0000000000110001111100100011000", 3 => "0000001111010010000101100000000", 
    4 => "1101111110111010001000111110111", 5 => "0010001000000000000111011101101", 6 => "1100000000101011111100000000000", 7 => "1111011000000000010011111110101", 
    8 => "1101010000101111111010111110011", 9 => "0000101111110110000000000010011", 10 => "0010011000111110000000000000101", 11 => "0001101000000001111100100001000", 
    12 => "0000011000010101111100000000000", 13 => "0000000000101010000000000000000", 14 => "0011011000001100000000000000000", 15 => "1110011111010100000000011100110", 
    16 => "0011000110111111110111100101001", 17 => "0000000001010010000000000010011", 18 => "0100101000000001110010011101110", 19 => "0000000000000000001010111011100", 
    20 => "0011010000000001111000011111110", 21 => "1101000111110110000000000000000", 22 => "0011000111010000000000011111011", 23 => "1010000000000000000000011101000", 
    24 => "0000000000000001100100000000000", 25 => "0000000000000000000000000010111", 26 => "0011000111000100000000011110001", 27 => "0000000000000001111100100010110", 
    28 => "0000000111101101101101011110100", 29 => "0000000000100000000000000000101", 30 => "0000000111110101110101011101100", 31 => "0001000000000000000000011101101", 
    32 => "0000000111011010000011000000000", 33 => "1110001000000000001101011101010", 34 => "1100001001111001101001000000000", 35 => "0000000000000001111010100000001", 
    36 => "1110111111010100000000000000000", 37 => "0000000000000001110100100100100", 38 => "0000000000000000000000011110101", 39 => "1001110110001010000000000000000", 
    40 => "0001111000000000000000000000000", 41 => "1110100000000000000000000001010", 42 => "0000000000111000001001100000000", 43 => "1110000111110000000000011111000", 
    44 => "1101110000000110001000000001111");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

