-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity MVAU_hls_1_Matrix_Vector_Activate_Batch_weights_6_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 31; 
             AddressWidth     : integer := 6; 
             AddressRange    : integer := 45
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of MVAU_hls_1_Matrix_Vector_Activate_Batch_weights_6_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "0000000000000000000000000000000", 1 => "0000011000000100000000011111101", 2 => "1110010111110110000000000011000", 3 => "0000000111010010000101100000000", 
    4 => "0011010111101010001100100000000", 5 => "1101011111100100000000011110101", 6 => "0000000000000000000000000010110", 7 => "0001010000110010000011100001100", 
    8 => "0000000111000010000010011000100", 9 => "1100100000000000000001000000110", 10 => "0000010000000001100001111111001", 11 => "1000100000000100000000111010111", 
    12 => "0000000110111100001001111111111", 13 => "1111010000000000000000000000000", 14 => "1001001101111011101111000000000", 15 => "0000000111010111111101100000000", 
    16 => "0000000000011010000000000010100", 17 => "0100011000110100001011111101011", 18 => "0011110110111110000000011111101", 19 => "0000000000110100000000011101001", 
    20 => "0000000000000001101101011110110", 21 => "0000111000000000000000011110101", 22 => "0000000111011110000000011101010", 23 => "0000100000000000001001100000000", 
    24 => "1101100111011001110101000001101", 25 => "0000000111111110000000011111000", 26 => "0000100000010010000000000000000", 27 => "0000000000000001111110111100110", 
    28 => "1111111000000000000011000000000", 29 => "0000000110110111111000000000000", 30 => "0011000111001001110001011110000", 31 => "1101010000111000000000011101110", 
    32 => "1111001111011110001110100000000", 33 => "1100110000000000010010000000000", 34 => "1101101111001011110111011110110", 35 => "0010011000000000000000000000000", 
    36 => "0000000000000000000000000000011", 37 => "1110001000111010000010000000000", 38 => "1110101000000000000110100001111", 39 => "1101000000000010001010100000000", 
    40 => "1111011000000000000000000000000", 41 => "0000000000000100000000000001000", 42 => "1110111000101110000000000000000", 43 => "0000000000000000000000000000000", 
    44 => "0000000111101110000000000010011");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

