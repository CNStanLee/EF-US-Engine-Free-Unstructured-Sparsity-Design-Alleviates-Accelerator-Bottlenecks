-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity MVAU_hls_1_Matrix_Vector_Activate_Batch_weights_23_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 31; 
             AddressWidth     : integer := 6; 
             AddressRange    : integer := 45
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of MVAU_hls_1_Matrix_Vector_Activate_Batch_weights_23_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "0010100000000000001000100000000", 1 => "0000000000011101111101111111111", 2 => "1110101000000000000111000000000", 3 => "0000001000110001111100100000000", 
    4 => "1011001111101010000011000000000", 5 => "1100000000001010000000000001111", 6 => "0000000000000001111011100100100", 7 => "1111001000101111111111000100010", 
    8 => "0001001111100001110001000000000", 9 => "1011010111100000000111000001000", 10 => "0000000000000001110001100000000", 11 => "1111100111001011111110000010010", 
    12 => "0000000000010110000011011111001", 13 => "1110110110111100000110011101101", 14 => "1110101000000110000001111100010", 15 => "0000000000000000000000000000000", 
    16 => "1111110000001101110001000000000", 17 => "0000000000001100001110011110110", 18 => "0001010000010000000000011111100", 19 => "0000000111011110000110100000000", 
    20 => "1110111000000000000000011110001", 21 => "0001001111011001111100000000000", 22 => "1111100000101001111111000001000", 23 => "0000100111100000000000011111100", 
    24 => "1100011000000000001001100000000", 25 => "0000000000000001111000000001110", 26 => "1110111000000000000000000000000", 27 => "0010010000000000000111000000000", 
    28 => "1010110111000011101110111000011", 29 => "1100101111011011101111100000000", 30 => "0000100111100111111011011101011", 31 => "0000000111110101101110100000000", 
    32 => "1101011000000000000000011101110", 33 => "0001000000010000000000000010010", 34 => "1111111111001010000111000000000", 35 => "0001100111101101111100000000011", 
    36 => "0000000000001010000000000010100", 37 => "0000000000001110001001100000000", 38 => "0000000000011100000111100000000", 39 => "1110010000000000001111000000000", 
    40 => "0000101000000001110100100000000", 41 => "0000000000000000000000000000000", 42 => "1111110000000000000000000000011", 43 => "0000000000000000000111000000010", 
    44 => "0000000000101110000000011101110");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

