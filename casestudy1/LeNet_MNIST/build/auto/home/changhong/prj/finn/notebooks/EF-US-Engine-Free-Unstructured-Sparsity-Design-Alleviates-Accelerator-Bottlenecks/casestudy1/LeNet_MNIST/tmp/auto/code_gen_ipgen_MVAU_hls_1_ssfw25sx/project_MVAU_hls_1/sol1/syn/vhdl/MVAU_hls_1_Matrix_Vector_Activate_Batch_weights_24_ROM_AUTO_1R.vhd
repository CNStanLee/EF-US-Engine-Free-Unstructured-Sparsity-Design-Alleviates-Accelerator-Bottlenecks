-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity MVAU_hls_1_Matrix_Vector_Activate_Batch_weights_24_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 31; 
             AddressWidth     : integer := 6; 
             AddressRange    : integer := 45
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of MVAU_hls_1_Matrix_Vector_Activate_Batch_weights_24_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "0010100000000000000000000000000", 1 => "1100011000000000000000000011101", 2 => "0000000000000000000000000011011", 3 => "0000000000000000000000000000000", 
    4 => "1110100111100000000000000000000", 5 => "0000000000000000001001111111100", 6 => "0001001000000000000000011101101", 7 => "0000000000000000000001111100111", 
    8 => "0001011000000000000000000000110", 9 => "0010111000010100000111100000000", 10 => "0000010111111001111101111110011", 11 => "0000010111101101111100000000000", 
    12 => "0000000000000110000000011100101", 13 => "0000000000000001110001100000000", 14 => "0000000000101110000000000000000", 15 => "0000000111100110001011111111111", 
    16 => "0000100000000000000000000000000", 17 => "0000000000100100000100111110101", 18 => "0011001111110111111110011111110", 19 => "0100000000101110001100000000000", 
    20 => "0000000000110011110100000000000", 21 => "1110001000000000000000011010110", 22 => "0000000110010110001110111101110", 23 => "0011000000000000000101111110001", 
    24 => "0000000111101010001100011111110", 25 => "0001101000001010000000000001011", 26 => "0001001000000001111111111000011", 27 => "0000000110101000000111000001101", 
    28 => "1100001000000000001010000000000", 29 => "1010000111011101100100100000000", 30 => "1101110111011101111011011100101", 31 => "1010110000000001111000011011000", 
    32 => "0010001110000100000100111111110", 33 => "1110101111110010001010111110011", 34 => "0101011111101101111001111111110", 35 => "0100011000100010000000000000010", 
    36 => "1101001000000000000000011101111", 37 => "0000001110111001111100100000000", 38 => "0000000000100000001001111111100", 39 => "0000000111110011100011011110111", 
    40 => "0000111000010100000111000000000", 41 => "0000000000010001110110011101011", 42 => "0000000000000001111011111101110", 43 => "0000000000000001111110100010001", 
    44 => "0000000111100101101000100000001");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

