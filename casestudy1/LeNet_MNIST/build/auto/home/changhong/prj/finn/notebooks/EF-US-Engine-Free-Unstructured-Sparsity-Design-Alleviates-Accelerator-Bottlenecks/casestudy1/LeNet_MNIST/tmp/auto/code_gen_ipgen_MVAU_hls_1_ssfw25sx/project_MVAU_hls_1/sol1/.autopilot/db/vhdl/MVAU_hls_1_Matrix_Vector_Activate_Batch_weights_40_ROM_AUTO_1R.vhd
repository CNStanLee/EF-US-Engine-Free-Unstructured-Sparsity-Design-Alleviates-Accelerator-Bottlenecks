-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity MVAU_hls_1_Matrix_Vector_Activate_Batch_weights_40_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 31; 
             AddressWidth     : integer := 6; 
             AddressRange    : integer := 45
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of MVAU_hls_1_Matrix_Vector_Activate_Batch_weights_40_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "1110011111110101111010011110110", 1 => "0000111000011101110111100000111", 2 => "0000000000010100000000000000000", 3 => "0001001000000000000000000010000", 
    4 => "0011001000000000001110100000000", 5 => "0000000000000001101100011100100", 6 => "0000000000000001111100011101011", 7 => "0000000111100110000111000000000", 
    8 => "0000000000000000001000000000000", 9 => "0000000000000000001011000000000", 10 => "0000001111001101110011000000000", 11 => "0000000000000001101111000000000", 
    12 => "1100000000000000010110000000000", 13 => "0001110000000000000000000001110", 14 => "0000000000000000000000000000000", 15 => "0000000000000000000110000000000", 
    16 => "1101100000000001111101100011111", 17 => "1110010001001000000001100000011", 18 => "0000000000000000001011100001100", 19 => "0000000000010110000111100000000", 
    20 => "0000000000000000000000011110100", 21 => "0000000000000001111011100000000", 22 => "1010011000000001111101000000000", 23 => "0000000000000000000000000000000", 
    24 => "0000000000000000000111000000111", 25 => "0000000111110001111000011110101", 26 => "1110101001000011101100100000000", 27 => "1110110000010111111101100001001", 
    28 => "0010011111101110000000000000010", 29 => "0000000110111100001110011111001", 30 => "0011101000000000000110000001010", 31 => "0000000000000001110111000011110", 
    32 => "1101001000101010000000000001101", 33 => "1110000000000000000000011101001", 34 => "0000000000011100000000000000000", 35 => "0010000000010000000000000000000", 
    36 => "0000000000100001101111000000000", 37 => "1101100000010001111101100000000", 38 => "1111000000000000001010100000000", 39 => "0000101000000001111010100000110", 
    40 => "1110110000010110000000000000000", 41 => "0000000000000001110010000000110", 42 => "0011000111111001110100000110000", 43 => "1100100000000000001100100000000", 
    44 => "0000000111101110000000000000000");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

