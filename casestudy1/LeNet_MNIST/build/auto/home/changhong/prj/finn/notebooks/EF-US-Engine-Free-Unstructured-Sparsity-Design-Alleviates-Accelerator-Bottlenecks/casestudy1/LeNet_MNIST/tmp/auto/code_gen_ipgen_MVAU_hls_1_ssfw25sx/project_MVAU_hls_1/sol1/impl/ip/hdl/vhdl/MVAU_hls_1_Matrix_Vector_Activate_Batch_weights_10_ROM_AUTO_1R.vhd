-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity MVAU_hls_1_Matrix_Vector_Activate_Batch_weights_10_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 31; 
             AddressWidth     : integer := 6; 
             AddressRange    : integer := 45
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of MVAU_hls_1_Matrix_Vector_Activate_Batch_weights_10_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "0010000000010001111100100000000", 1 => "0000000000000000000000000000000", 2 => "1110011111100110000000011101101", 3 => "0000000000000000000000000000000", 
    4 => "0000000000010100000000000000000", 5 => "0100011000000000000000000001000", 6 => "0000000000000000000000000000000", 7 => "0000000000000000000111111101110", 
    8 => "0000000000000000000000000000000", 9 => "0000000000000001110101011111000", 10 => "0011100000000000001000100001110", 11 => "0000110000101111111010111101010", 
    12 => "1110111000000000000000000000100", 13 => "0000000000000000000001000011110", 14 => "0000000111110000000000000000000", 15 => "0001101111010111101101111101001", 
    16 => "1100100111011010000011000000000", 17 => "0011010110110110000000000001100", 18 => "0000000111000101111110011100111", 19 => "1111110000000001110001011110101", 
    20 => "0000000000011010000000000001011", 21 => "0000000111110100000000011110010", 22 => "0000000111000101111001111011101", 23 => "0000000111101011101111111101010", 
    24 => "0010110000000001110101000000000", 25 => "0000000000011110000000000001100", 26 => "0001111000000001111110011110011", 27 => "0000000111100010000000011100001", 
    28 => "0001010000000111110111000001101", 29 => "0100101000000000000010100001011", 30 => "0000000000000000000000000000000", 31 => "1110001000100000000000000000000", 
    32 => "0000000111111000000000000010111", 33 => "0000000000100100010000000000100", 34 => "0000101000000000000000000001110", 35 => "1110101000000001110100100000000", 
    36 => "1110000111011010000000000000000", 37 => "0010001000000001111010000011101", 38 => "1001011111011010000000011100100", 39 => "0000000000000001110100100000000", 
    40 => "1110100111100101110101100000000", 41 => "0001111111011010001110100000000", 42 => "0000000111011010000000011111000", 43 => "0000000111000001111111011100010", 
    44 => "0101100000000000000000000000000");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

