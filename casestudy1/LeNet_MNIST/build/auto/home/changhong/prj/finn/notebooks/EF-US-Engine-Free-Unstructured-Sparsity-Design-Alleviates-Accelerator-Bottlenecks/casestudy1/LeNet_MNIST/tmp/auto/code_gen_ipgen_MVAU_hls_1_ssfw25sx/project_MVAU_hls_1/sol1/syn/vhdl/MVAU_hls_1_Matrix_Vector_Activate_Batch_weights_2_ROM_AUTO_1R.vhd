-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity MVAU_hls_1_Matrix_Vector_Activate_Batch_weights_2_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 31; 
             AddressWidth     : integer := 6; 
             AddressRange    : integer := 45
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of MVAU_hls_1_Matrix_Vector_Activate_Batch_weights_2_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "0000000000100110000000000101000", 1 => "0000000000000001110110000010101", 2 => "0000000000000001110011111111000", 3 => "1111001000000001111110011110011", 
    4 => "0000101000100101101111000100000", 5 => "0000000000110000001100100100000", 6 => "0001000111011100000000011110001", 7 => "0000000111010011110111000000000", 
    8 => "1110100000000000000000000000000", 9 => "0010001000101111110100100001110", 10 => "0000000000100010000000000110101", 11 => "0000000111001110000000000000000", 
    12 => "0110000111100111100011100011011", 13 => "0000101111110011111010000001101", 14 => "0001100000000001110000100100010", 15 => "0000000111000111110111111100001", 
    16 => "0000000111001001111101011101110", 17 => "0000000111011000000000011110010", 18 => "0000000000000001101100000000000", 19 => "1110010000110011110101000000000", 
    20 => "1110001111110000000000000000000", 21 => "0010010000000000000000011011100", 22 => "0001101110110110000000011001110", 23 => "0000000000000001110100000000000", 
    24 => "1101100000010001111011100100110", 25 => "0000111000000000000000000010011", 26 => "0000000111110000000000011010001", 27 => "0000000000000001110100011100111", 
    28 => "0010111000011100000110111111100", 29 => "1110101000001100000000011110010", 30 => "0000000000000001111001111100111", 31 => "0001010000000100000000011111001", 
    32 => "0000000000000000000101111010101", 33 => "0101010111101101110111000001001", 34 => "1111101110101000010100000000000", 35 => "0000100111001010000000000000000", 
    36 => "0000000000101100000000011011000", 37 => "0000000000000000000000011000111", 38 => "1111100000000000001100000001001", 39 => "1010001110101110000000000000000", 
    40 => "0000110000000010000000011100111", 41 => "0000001000000000000000000010010", 42 => "0000000000001010000000011101110", 43 => "0000000111001010000000000010000", 
    44 => "0000000111010000010110011011111");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

