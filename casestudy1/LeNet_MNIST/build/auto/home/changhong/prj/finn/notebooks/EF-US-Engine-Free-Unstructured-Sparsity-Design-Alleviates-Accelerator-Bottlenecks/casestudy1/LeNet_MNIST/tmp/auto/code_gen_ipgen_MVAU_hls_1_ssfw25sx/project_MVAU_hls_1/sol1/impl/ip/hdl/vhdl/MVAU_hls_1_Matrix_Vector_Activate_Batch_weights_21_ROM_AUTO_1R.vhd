-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity MVAU_hls_1_Matrix_Vector_Activate_Batch_weights_21_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 31; 
             AddressWidth     : integer := 6; 
             AddressRange    : integer := 45
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of MVAU_hls_1_Matrix_Vector_Activate_Batch_weights_21_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "0000000000000000000000000000000", 1 => "0010000000000000000000011110110", 2 => "1110000000011000000000000001001", 3 => "0000000000001110000000000000000", 
    4 => "0011101000000010000000011100111", 5 => "0001100000000000000111000000000", 6 => "0000110000000001111100100100111", 7 => "0000000000000001111010100000000", 
    8 => "0100010000000001101010011110100", 9 => "0001111000110100000000011100111", 10 => "1100111000000000000100000000000", 11 => "1110111111011001111010100000101", 
    12 => "0000001000000001101111100000110", 13 => "1110011111010111110011011110110", 14 => "0000000001000111110101000000000", 15 => "1111011111000101101101011100100", 
    16 => "0000000111101000000000000000000", 17 => "0010110110101000000000000000000", 18 => "0000000110111110000000011011111", 19 => "0000000000101010000000000000000", 
    20 => "0001011111110011111001100000000", 21 => "0000010000000001111110111010101", 22 => "0000000110100000000100100000000", 23 => "1111000000000000000000000000110", 
    24 => "1100100000000001111001000000000", 25 => "0000000000000100000000111111011", 26 => "1110001000000011111100000000101", 27 => "0001000000000000001100000000000", 
    28 => "0000000000011000000000000000000", 29 => "1101011111100000000000000010110", 30 => "0000000000001010000000000001010", 31 => "0000100000000010000000011110000", 
    32 => "0010000111111000001100011111110", 33 => "0000000000010000000111000010111", 34 => "1111001110101000000000000010110", 35 => "0000000000000000000000000000000", 
    36 => "0000000000001010000000000000000", 37 => "1110011000000000000000011011100", 38 => "0001001000000100000000000010111", 39 => "0000010111001110010100011101001", 
    40 => "0000000000000000000010100000110", 41 => "0010110000000000000000011001111", 42 => "0000000111101110000000000000000", 43 => "0010110000001010000101000000000", 
    44 => "0000000000011110000000000000000");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

