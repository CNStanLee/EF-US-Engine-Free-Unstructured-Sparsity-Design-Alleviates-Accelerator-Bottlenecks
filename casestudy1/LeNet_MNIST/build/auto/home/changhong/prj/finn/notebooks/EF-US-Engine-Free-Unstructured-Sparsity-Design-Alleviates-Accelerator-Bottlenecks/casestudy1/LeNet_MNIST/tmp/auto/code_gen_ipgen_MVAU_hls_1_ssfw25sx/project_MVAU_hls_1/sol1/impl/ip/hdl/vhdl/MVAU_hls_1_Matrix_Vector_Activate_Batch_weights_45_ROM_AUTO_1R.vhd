-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity MVAU_hls_1_Matrix_Vector_Activate_Batch_weights_45_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 31; 
             AddressWidth     : integer := 6; 
             AddressRange    : integer := 45
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of MVAU_hls_1_Matrix_Vector_Activate_Batch_weights_45_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "0000000000001000000000000000000", 1 => "0000000000010010000000011001000", 2 => "0010101110101001111101100000000", 3 => "0101001000000000000000000000000", 
    4 => "0101000001010010001010111110100", 5 => "1101100111110011111011000000000", 6 => "0000000111100000000101011101100", 7 => "0011111111011010000000000001010", 
    8 => "0000000111101100000011000000000", 9 => "1110001000100000000000000000000", 10 => "0100001000000000000000000000000", 11 => "0010000000010011111001011011011", 
    12 => "0000000111110110000101111111101", 13 => "0010100000000000000000000000000", 14 => "1111000000000000000000000000011", 15 => "1101010111110010000000011110100", 
    16 => "1100000000000001111010011100011", 17 => "0000000111000110001001100000000", 18 => "1101100111011010001110111110010", 19 => "0000000000000000000011100000000", 
    20 => "0000000000000001101011100000000", 21 => "0001010000000000000000011011111", 22 => "1100001111011000000000011110110", 23 => "0000000000000000001100100000000", 
    24 => "0001101110101111111110100000000", 25 => "0000000000001011111111100000000", 26 => "0011000000110011110011100000000", 27 => "1100101000000100000101011011101", 
    28 => "0001000000010110000000000011100", 29 => "0000000111110100000111000000000", 30 => "0000000000000001110011100000000", 31 => "1110011000100110000000011110001", 
    32 => "1100110110111100000110111111011", 33 => "0000000000011100001110100000101", 34 => "0000000000110100000000011110000", 35 => "0010010000000000000000000000000", 
    36 => "1110010000000000000000000000000", 37 => "0000000000000001110110000000000", 38 => "0000000000000000000000000000000", 39 => "1010110111110110000000000000000", 
    40 => "0000000111101000000010011110110", 41 => "0011000000000001110010100001101", 42 => "1010110000100000000000000000000", 43 => "0000000000000001011011011110011", 
    44 => "1110110111010110000000011100010");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

