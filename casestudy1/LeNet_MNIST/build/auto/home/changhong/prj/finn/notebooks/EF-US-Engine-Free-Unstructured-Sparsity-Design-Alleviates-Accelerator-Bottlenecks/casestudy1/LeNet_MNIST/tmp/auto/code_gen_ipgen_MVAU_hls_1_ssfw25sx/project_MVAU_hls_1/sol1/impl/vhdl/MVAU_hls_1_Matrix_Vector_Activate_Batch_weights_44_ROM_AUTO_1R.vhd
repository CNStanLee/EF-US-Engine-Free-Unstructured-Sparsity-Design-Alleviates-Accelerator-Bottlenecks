-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity MVAU_hls_1_Matrix_Vector_Activate_Batch_weights_44_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 31; 
             AddressWidth     : integer := 6; 
             AddressRange    : integer := 45
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of MVAU_hls_1_Matrix_Vector_Activate_Batch_weights_44_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "0000000111111011111111100000000", 1 => "0000000001001000000000011011010", 2 => "1100000000000001111100011101010", 3 => "0000000000000000001101100011110", 
    4 => "1100101110101000000000000000000", 5 => "1100101111011000000000000000000", 6 => "0000000000000000000000000000000", 7 => "1111000000000001111000100010101", 
    8 => "0011110000001110000000000001110", 9 => "0010100000000000000000000000000", 10 => "0000000000010101110011011110000", 11 => "1100110000000000000000000000000", 
    12 => "1111101000000000001100100000000", 13 => "1111010111101100000000011101010", 14 => "0000000111110001111011111111011", 15 => "1100111000110000000100100010001", 
    16 => "0000000110101101111111100000000", 17 => "1111011000001001110100100000000", 18 => "0000000000000001110011000000000", 19 => "1111001000000001110010000000010", 
    20 => "1011010000000000000101000001111", 21 => "0000000111010101111010000010110", 22 => "0000000000000001111010000100011", 23 => "0000000000011100000000000000000", 
    24 => "1111110000010110000000000011001", 25 => "0010011000000001111101011110000", 26 => "1101101111010100000000000000000", 27 => "1110000001000010000011100000000", 
    28 => "1011011000000001111101011100111", 29 => "1010010000000000000000000000000", 30 => "1111101000011100000000000000000", 31 => "0000000000000000000000010111011", 
    32 => "0010111111010110000110011011011", 33 => "0000000110111011011001011100010", 34 => "0001111000000011111100111111111", 35 => "0010111000000000000110000001101", 
    36 => "0010101000000001110100100001011", 37 => "0000100000011110000000000011001", 38 => "0000000000011010000000000000000", 39 => "0000000000110111111000000000000", 
    40 => "0000000000000000000000000000000", 41 => "1111001000000001101110100100011", 42 => "1111111000000000000000000011010", 43 => "1101111000000000000000000000000", 
    44 => "1111000111110101110111100000000");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

