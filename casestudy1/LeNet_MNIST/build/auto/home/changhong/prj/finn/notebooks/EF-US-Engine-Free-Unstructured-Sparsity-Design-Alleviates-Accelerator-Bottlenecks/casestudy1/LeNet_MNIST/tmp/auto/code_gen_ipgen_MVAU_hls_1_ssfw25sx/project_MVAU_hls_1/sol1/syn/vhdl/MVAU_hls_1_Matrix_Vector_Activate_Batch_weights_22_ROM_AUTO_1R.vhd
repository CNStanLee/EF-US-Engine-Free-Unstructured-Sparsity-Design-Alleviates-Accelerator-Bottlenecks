-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity MVAU_hls_1_Matrix_Vector_Activate_Batch_weights_22_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 31; 
             AddressWidth     : integer := 6; 
             AddressRange    : integer := 45
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of MVAU_hls_1_Matrix_Vector_Activate_Batch_weights_22_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "1111110000100110001100100000000", 1 => "0000000000000000000000000000000", 2 => "1111011000000000000000000000000", 3 => "0000011000000001110110011111100", 
    4 => "1101100111001010000000000001010", 5 => "0011001111010000000011100000000", 6 => "0000111000000110000000000010101", 7 => "0000000000110100000000000000000", 
    8 => "0000010000000001101110111110011", 9 => "1110100111001000000110000000000", 10 => "1110011000000001111011100000000", 11 => "1010111000000000000000000001111", 
    12 => "0000000000110000001100011110111", 13 => "0000000111111000000000011101111", 14 => "1111100111001110000000000000000", 15 => "0001110000000000000000000001000", 
    16 => "0001100000000000000000000000000", 17 => "1110100000010000000000000000000", 18 => "0001101000000001111111100001000", 19 => "0000000111011010000000000000000", 
    20 => "0001111111000101111010011100101", 21 => "0001101001000011111111000010101", 22 => "0000000000000000000000011111000", 23 => "0000001111111011111001000010110", 
    24 => "1111100111111010000110111110010", 25 => "0011100000111000000000000000000", 26 => "1010111000111000000000000000000", 27 => "0000000000000110000000011100010", 
    28 => "1000000000010000000000011110001", 29 => "1100110111100001100101000000000", 30 => "0000000000000001110001000000000", 31 => "0000000111010100000000000010001", 
    32 => "0000000000011100000000000000000", 33 => "0000010000000000000000000000000", 34 => "0001010000000000001000011100001", 35 => "1101101000000001111010000000000", 
    36 => "0001000111100000000000000000000", 37 => "0000000000000000000011011111110", 38 => "0000000111101111110010111011110", 39 => "1100111000001110010100111101011", 
    40 => "0001111000000000000000000000000", 41 => "1100110000000110001001011111010", 42 => "0000000000000000001011011100000", 43 => "1110101000010000000000000000000", 
    44 => "1010010111101001111110111111011");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

