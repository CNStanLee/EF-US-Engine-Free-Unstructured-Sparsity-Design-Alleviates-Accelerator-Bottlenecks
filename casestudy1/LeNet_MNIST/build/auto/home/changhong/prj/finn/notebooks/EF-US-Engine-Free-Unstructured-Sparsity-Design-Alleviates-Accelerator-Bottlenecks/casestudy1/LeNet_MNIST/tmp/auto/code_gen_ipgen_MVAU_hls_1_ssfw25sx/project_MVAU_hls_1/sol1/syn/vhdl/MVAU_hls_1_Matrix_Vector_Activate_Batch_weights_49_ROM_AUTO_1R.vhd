-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity MVAU_hls_1_Matrix_Vector_Activate_Batch_weights_49_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 32; 
             AddressWidth     : integer := 6; 
             AddressRange    : integer := 45
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of MVAU_hls_1_Matrix_Vector_Activate_Batch_weights_49_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "00001101000000000000000011111110", 1 => "00000000111111111111000100000000", 2 => "00000000000000000000000011100000", 3 => "11100000000000000000000011101100", 
    4 => "11011100000000000000000000000000", 5 => "00000000000010100000001000000000", 6 => "11111110000000000000000011000100", 7 => "00000000000000001110111100000000", 
    8 => "00000000000011110000100000000000", 9 => "00000000111110011111001111111101", 10 => "00000000000001010000000000000000", 11 => "00000000000000000000000000000000", 
    12 => "10110001111110001110111000000001", 13 => "00000000000010010000000000000000", 14 => "00000000000010010000000000000000", 15 => "00010011000001000000000011111001", 
    16 => "00000000111111010000000000000000", 17 => "00000000110101110000000000000000", 18 => "00000001111110011110110111100111", 19 => "00000000000000001111010111111111", 
    20 => "00000000000011010001110000000000", 21 => "00101001111111100000000011001100", 22 => "00000000110111101110100100000100", 23 => "00011010000000001110111000000000", 
    24 => "00011011000000000000000000000000", 25 => "00000000000000111111101111101101", 26 => "00010001000000000000000000000000", 27 => "00000000111110010000000011100111", 
    28 => "00011110111001101111011000000000", 29 => "00011101001000110000110111101001", 30 => "11111110111100001101100000000000", 31 => "11110100111001111111010000000000", 
    32 => "00101011000000000000000000000000", 33 => "11101100110100110001000011100101", 34 => "11111110000000001111101000000000", 35 => "11111011111101111110111100000000", 
    36 => "00000001000000000000000011110101", 37 => "00000000111000010000100000100000", 38 => "00000000111100100011101000000101", 39 => "00000000000000000000000011111110", 
    40 => "00000001111010101110111000000000", 41 => "00000000000000000000000000000000", 42 => "00000000000000000000000000000000", 43 => "00000000111101110000000011101100", 
    44 => "11110001000000000000000000000000");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

