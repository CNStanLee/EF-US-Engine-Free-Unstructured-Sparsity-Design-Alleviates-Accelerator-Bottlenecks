-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity MVAU_hls_1_Matrix_Vector_Activate_Batch_weights_19_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 31; 
             AddressWidth     : integer := 6; 
             AddressRange    : integer := 45
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of MVAU_hls_1_Matrix_Vector_Activate_Batch_weights_19_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "1011111000000000000011100010000", 1 => "1110110000000000000000000011011", 2 => "1110010000011101110011100000000", 3 => "1100011000100010000100100000000", 
    4 => "1110000110100001110010000000000", 5 => "0000101111101001110100100000101", 6 => "1101111000000000000000000000000", 7 => "0000111000000000000000000010101", 
    8 => "0000000000000001111101100000000", 9 => "1111000110101101111011100010001", 10 => "0000000111111011111100100000000", 11 => "0000000000100001111010000001010", 
    12 => "0000000111110110000000000011110", 13 => "0000000000000000010000011111100", 14 => "1100110111000101101110000000000", 15 => "0000000000011100001010100100011", 
    16 => "0001111000000001110101011011001", 17 => "1101111111001110000000000000100", 18 => "0010000000000001110101011111011", 19 => "0011000001001010000000000001010", 
    20 => "0000000000100110000000000000000", 21 => "0011101000010111110110100000000", 22 => "1110111111110111110101000000100", 23 => "0100001111111101110001000000000", 
    24 => "0000100000001110000101000000000", 25 => "0011010111111100000000000000000", 26 => "0000000000000001110101011101010", 27 => "1100110000000001110101111001101", 
    28 => "0100011000000000000000000000000", 29 => "0000101000100000000001111110100", 30 => "1110100000000001111110100000001", 31 => "0000000111001010000110100000000", 
    32 => "0100101110011100000000000000100", 33 => "1111001110111111101110111100111", 34 => "0011100000111010000000011110010", 35 => "1100110111101100000000000000000", 
    36 => "0000000111100110000000011100101", 37 => "0011000111001110000000011110010", 38 => "0000110111100011111111000000000", 39 => "0110011000010110000111000000000", 
    40 => "0000000111010101110001111101011", 41 => "1111010000000000000000000000010", 42 => "0101110000000000010110011100001", 43 => "0000000111000010000000011111001", 
    44 => "0000000000100110001011100000000");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

