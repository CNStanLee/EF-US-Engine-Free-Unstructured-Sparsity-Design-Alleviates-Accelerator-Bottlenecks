-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity MVAU_hls_1_Matrix_Vector_Activate_Batch_weights_9_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 32; 
             AddressWidth     : integer := 6; 
             AddressRange    : integer := 45
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of MVAU_hls_1_Matrix_Vector_Activate_Batch_weights_9_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "00000000000001001110000000000000", 1 => "11100010000000001111110111111100", 2 => "00000000111110110001010000000000", 3 => "00000000000000000000000011111101", 
    4 => "11010000111010010100011000000000", 5 => "00001011000000000000000011110010", 6 => "00000011000111101100010000000000", 7 => "10101011000001100001101111110010", 
    8 => "00011000000010010000111100000000", 9 => "00000000111001000001111000000000", 10 => "11101101110000101111011000000000", 11 => "00000000000000001110101000000100", 
    12 => "11101100000011000000000011110100", 13 => "00010011000000000000100000000000", 14 => "00000110000000000001011011011111", 15 => "00000000000001010000000011111010", 
    16 => "00000000000010101110101000000000", 17 => "11111000000010110001011100000000", 18 => "00000000000000000000000000001101", 19 => "00000000111101100001001000000000", 
    20 => "00000000000000000000101000000000", 21 => "00000000000000000001111100000000", 22 => "11001100000010100000000000000000", 23 => "11111010000100100001011000000000", 
    24 => "11110111000000000000000000000000", 25 => "11001010111100000000000000000000", 26 => "00000000110100110000000000000000", 27 => "11110100000000001101001000100011", 
    28 => "11101001000000000001011011101011", 29 => "00001010000000000000000000010000", 30 => "00001100000000000000010100000000", 31 => "00000000000000000000000000010000", 
    32 => "11100011111011010000000000011100", 33 => "11111110000000001110110000000011", 34 => "11111000000000001110010100000000", 35 => "00000000000001110000000000000010", 
    36 => "00000000000000001110110000000000", 37 => "11110111111100101110110100100100", 38 => "11111111111100100000000011110010", 39 => "00000000000000001101011100000000", 
    40 => "11011111001001001111111100010111", 41 => "00000000111010110000010011110101", 42 => "00010000111011011101111100011001", 43 => "00000000111100101111011100000000", 
    44 => "00000111000111000000000000011000");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

