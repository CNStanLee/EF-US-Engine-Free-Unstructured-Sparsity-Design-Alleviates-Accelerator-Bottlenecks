-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity MVAU_hls_1_Matrix_Vector_Activate_Batch_weights_39_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 31; 
             AddressWidth     : integer := 6; 
             AddressRange    : integer := 45
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of MVAU_hls_1_Matrix_Vector_Activate_Batch_weights_39_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "0001101111100110001111100001000", 1 => "0000000001001011111000000000000", 2 => "1111001000000000000000000000000", 3 => "0010101000111100000110000011001", 
    4 => "0001001000000000000110100000000", 5 => "0011110111100000000000011101011", 6 => "0001010000010110000001000001011", 7 => "0000000000000000000000011101101", 
    8 => "0000010000000000000000011111000", 9 => "0010001000000000000000011110011", 10 => "1011101000000001110111011111001", 11 => "1100101111010110000011100000010", 
    12 => "0100101111110110001001000000000", 13 => "1101100111010000001100011100100", 14 => "0000010111110101100110000000000", 15 => "1111100110001110000000011110011", 
    16 => "0100010000000000000000000001101", 17 => "0101011000010110001110100000000", 18 => "0100100111001110000000011101111", 19 => "0011010001100000000000011010110", 
    20 => "0000000111010101100001111100001", 21 => "0000000000000000000110100000000", 22 => "0000000111010110000000000000000", 23 => "0000000000000000000000011100110", 
    24 => "1011110000001101111011000000000", 25 => "0011111000000001111000000000000", 26 => "0000000000011000000100111001100", 27 => "0000000111010000000000011110111", 
    28 => "1110010000001000001101100001000", 29 => "0010100000000001110111100010110", 30 => "1110111111100011110000100000000", 31 => "1011100111100011110001011101001", 
    32 => "1110010000000000000011000010001", 33 => "1010111111110000001101100000000", 34 => "1010111111100111110001000000100", 35 => "0010110000000000000000000000000", 
    36 => "1111001000011100000000000000010", 37 => "1100001000000001110110111111100", 38 => "0000000000100110001000000001001", 39 => "1011100000000000000000000000000", 
    40 => "1111110000000001111101111111100", 41 => "0010001000000001111110000000001", 42 => "0100011000001001101111000001010", 43 => "0011111000000000000000000000000", 
    44 => "0010101000000000000100011110111");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

