-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity MVAU_hls_1_Matrix_Vector_Activate_Batch_weights_38_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 31; 
             AddressWidth     : integer := 6; 
             AddressRange    : integer := 45
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of MVAU_hls_1_Matrix_Vector_Activate_Batch_weights_38_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "0001001000011110000000000000000", 1 => "0000000000001100000000000001001", 2 => "0000000000000000000000011111101", 3 => "1111100000000000000000000000000", 
    4 => "1101110000000000000000000010011", 5 => "0000000000000000000000000010010", 6 => "0000000000010001111011000000100", 7 => "1111011000000000000000000000011", 
    8 => "0000000111111111111010100000000", 9 => "1010011111110011111010100000000", 10 => "1010101000000001110011000000000", 11 => "0000000111100000000000000000100", 
    12 => "0000000000000000000000000000000", 13 => "1001101000000000000000000000000", 14 => "1110101110001011101011100000000", 15 => "0000000001001000000000000000000", 
    16 => "0000000000001101111110000000000", 17 => "0000000000000001110100000011011", 18 => "0000000111110011110110000000000", 19 => "0001001000000111110011000000000", 
    20 => "1111111000110000000000000000000", 21 => "0011000111111110000000011101000", 22 => "0000000000000000000000011100111", 23 => "0000010111011010000000011111111", 
    24 => "0011011000011011111001000010110", 25 => "1100101000000000000101000000011", 26 => "0010011111110111101000011000010", 27 => "0000000110110100000011100000000", 
    28 => "0000000000010110001001000000000", 29 => "0011000000000001110110000000000", 30 => "0001011000000010000000000000010", 31 => "0001100000000001111010111111001", 
    32 => "0011100000000001111100100001100", 33 => "0000000111001100000000000000000", 34 => "0010101000101110000010011110110", 35 => "1110101111100000000000011111101", 
    36 => "1111101111011010000011111110001", 37 => "0010010111100011101101000000000", 38 => "0001110111000111101110011110001", 39 => "0010100000111001111100011110100", 
    40 => "0000000111111110000101000000000", 41 => "0100011000000001111100011101101", 42 => "0110001111101110001011011110100", 43 => "0010101111100110001101100000000", 
    44 => "0101001001001010001011000000000");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

