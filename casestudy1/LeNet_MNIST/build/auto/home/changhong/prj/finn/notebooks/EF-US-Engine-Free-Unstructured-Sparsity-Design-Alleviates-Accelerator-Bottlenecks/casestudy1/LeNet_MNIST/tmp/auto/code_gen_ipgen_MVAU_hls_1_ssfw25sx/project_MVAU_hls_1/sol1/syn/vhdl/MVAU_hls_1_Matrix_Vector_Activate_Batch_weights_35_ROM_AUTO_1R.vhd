-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity MVAU_hls_1_Matrix_Vector_Activate_Batch_weights_35_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 31; 
             AddressWidth     : integer := 6; 
             AddressRange    : integer := 45
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of MVAU_hls_1_Matrix_Vector_Activate_Batch_weights_35_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "0000000000011100000000100011010", 1 => "0000000000000000000000000010000", 2 => "1100000111111101101011000000000", 3 => "0000000000001110000000000000000", 
    4 => "0001111000011001110010111111011", 5 => "0000000000000000001000100000000", 6 => "1011111111011101110110000011011", 7 => "1011001000101011101001000101000", 
    8 => "1110100000000001111110000000000", 9 => "1101011000000000000000000001100", 10 => "1101111000000001110110011100100", 11 => "1000111000000000000000000000000", 
    12 => "1100110000000001110100100000000", 13 => "1101110111100010000000011110101", 14 => "1100010000000001111010100000000", 15 => "0000000000000000000000000000000", 
    16 => "0000000000000000000000000000000", 17 => "0000000111110011110001111101000", 18 => "0000110000000000000000011110000", 19 => "0000101000110000000001000000000", 
    20 => "1110001000010110001101000100100", 21 => "0001110111011001111011011111010", 22 => "0000000000000001110111100010010", 23 => "0000000000011101111001011011111", 
    24 => "0010000000111011111001000101011", 25 => "1100100000110110000111000000000", 26 => "1101011111111101111010000001001", 27 => "0000000000010010000000000011101", 
    28 => "0000000000000000010000100000000", 29 => "0000000000001010000000100100000", 30 => "0000000111010101111101000000000", 31 => "0000000111110000000000010110110", 
    32 => "0001101101110101111111111010110", 33 => "1110100000000001111011000000000", 34 => "1101001000000000000000011111100", 35 => "0001100000001001110100011100101", 
    36 => "0000000000000000000000011100111", 37 => "0010000000000011111101111100001", 38 => "0000000000000001111111111111010", 39 => "0000000000000000000101000000000", 
    40 => "0001101000000000000100000000000", 41 => "0010111000010101111100011111111", 42 => "1101100000000000000000000000000", 43 => "0000000000010000000000011111000", 
    44 => "0000110000000000000000000001010");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

