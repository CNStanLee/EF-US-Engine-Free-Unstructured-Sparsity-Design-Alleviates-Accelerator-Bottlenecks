-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity MVAU_hls_1_Matrix_Vector_Activate_Batch_weights_30_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 31; 
             AddressWidth     : integer := 6; 
             AddressRange    : integer := 45
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of MVAU_hls_1_Matrix_Vector_Activate_Batch_weights_30_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "1011010000011110000000000000000", 1 => "0000000111001110000000000100000", 2 => "0001011001000011111011100100001", 3 => "1110000000001000000000011111010", 
    4 => "1111010000000000000000000001010", 5 => "1100010000000000000001000010110", 6 => "1101000000000000000100100010110", 7 => "0000000000101100000000000011110", 
    8 => "1111010111100000001011100000000", 9 => "1110100110101010000100100001100", 10 => "0000000000000001110001011101111", 11 => "1110001000000000000000011111101", 
    12 => "0000000111000110000000000000000", 13 => "1110001000000001111001100000000", 14 => "1110000000000000000000011111001", 15 => "0000000000000000000010000000000", 
    16 => "0001101110011101111101000000000", 17 => "0000001000000001110111000001100", 18 => "0000111000000001111111111101100", 19 => "0001011001001101111001000010011", 
    20 => "1111100000111110000101100010001", 21 => "1110100110110001111100000000111", 22 => "1011011000000000000000000011010", 23 => "0000110111101111111100100000000", 
    24 => "1111011000100110000000000010111", 25 => "0000000000000001111111000000000", 26 => "1110010000000001110010011101101", 27 => "0000000000000000000100100000000", 
    28 => "0000000000000000000100100000000", 29 => "0000110111101000000000000000000", 30 => "0000111000000001110001011101001", 31 => "1111011000001001111100111000110", 
    32 => "0100001110011010000000000000000", 33 => "0000000111000100000100100000000", 34 => "0010010000000001111000100000000", 35 => "0000000000000000000110000000000", 
    36 => "0010010001000101101011000000000", 37 => "0011111111000111101111100000000", 38 => "1111001000000000000000000000000", 39 => "0010000000111100000010000000000", 
    40 => "0000000000110010000000000000000", 41 => "0011001000001101110100100000000", 42 => "1110110111000100000000000000001", 43 => "0010011111011111100011111101011", 
    44 => "0010101000000000000000000000000");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

