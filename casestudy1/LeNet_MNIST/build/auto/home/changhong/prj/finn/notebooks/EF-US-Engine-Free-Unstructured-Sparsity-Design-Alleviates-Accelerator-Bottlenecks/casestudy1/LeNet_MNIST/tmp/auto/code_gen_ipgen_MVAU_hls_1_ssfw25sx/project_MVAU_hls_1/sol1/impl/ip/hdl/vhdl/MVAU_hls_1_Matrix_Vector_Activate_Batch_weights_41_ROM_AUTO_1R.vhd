-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity MVAU_hls_1_Matrix_Vector_Activate_Batch_weights_41_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 31; 
             AddressWidth     : integer := 6; 
             AddressRange    : integer := 45
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of MVAU_hls_1_Matrix_Vector_Activate_Batch_weights_41_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "0000000000000001111101000000000", 1 => "1111000000000001110111011110111", 2 => "1101000000100000000000000000000", 3 => "0001010000000000000000000000000", 
    4 => "0000000000000000000000000000000", 5 => "0000000000011010000001011101010", 6 => "1110110111011001111000100000000", 7 => "1101111000001010000000000000101", 
    8 => "0000000000000000000000000001110", 9 => "1010010000000000001000000000000", 10 => "0001011111101110000000011101111", 11 => "0010111000101001110111011111001", 
    12 => "1101000000000111111100111110010", 13 => "0011111000000000000000000000000", 14 => "0010110000000000001100111110111", 15 => "0000000000000000000010000000000", 
    16 => "1110110111111000000000000000000", 17 => "1110101000110001111000011111110", 18 => "1011010111101001111100111100010", 19 => "0000000000110101111000111100011", 
    20 => "0000000000010000000000000000000", 21 => "1100010000000000000101100000010", 22 => "1010110000000001111011000000000", 23 => "1100111000000001110100011111100", 
    24 => "0000000111110100000000000010011", 25 => "0000111000000000000010000010001", 26 => "0000000000000000000000000001111", 27 => "1110111000101001110000100101101", 
    28 => "1001110000001110000000011110010", 29 => "1101100000010111111010100010110", 30 => "1111000111100111111101111110100", 31 => "0000000000000000000100000000000", 
    32 => "0001000110100000000000011011111", 33 => "0000001111010010000000011100000", 34 => "0010110000100010000000011110011", 35 => "0000100000000000000000000000010", 
    36 => "1111111111100000000000000000000", 37 => "0000000000010001111011011110111", 38 => "0000000000000000000000011110001", 39 => "0001000000110011101110000001111", 
    40 => "0000000000010110000101100010110", 41 => "0000001111010110000000000000000", 42 => "0000110000011001111011000000001", 43 => "0000000111111010000000000000000", 
    44 => "0000000000011111111011100011000");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

