-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity MVAU_hls_1_Matrix_Vector_Activate_Batch_weights_14_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 32; 
             AddressWidth     : integer := 6; 
             AddressRange    : integer := 45
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of MVAU_hls_1_Matrix_Vector_Activate_Batch_weights_14_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "00000000000000001111100000000000", 1 => "00000000000000001110001000000000", 2 => "00000000000000000000000000000000", 3 => "00000000000000000000000000100011", 
    4 => "11100100110101000000110000001010", 5 => "00000000000000011111101100010101", 6 => "00000000000010000000000000000010", 7 => "11100011000111110000110100000000", 
    8 => "00000000000010011111101000000000", 9 => "00000011110101000000000000000001", 10 => "00000000000000000001000000000000", 11 => "00001001000001001110000100000000", 
    12 => "11011110000000001110110100001101", 13 => "00000110000000000001001100001100", 14 => "00000001000001100000000000000000", 15 => "00000000000010100000000000000000", 
    16 => "00000000000000000000001000011010", 17 => "11110110000000000000000000000000", 18 => "00000000111110111111000100000000", 19 => "11110110111011000000000000000000", 
    20 => "00000000000000000000000100000000", 21 => "00000000000000000000110100000000", 22 => "10111110000101111110111000000000", 23 => "00001100000000000000000000000000", 
    24 => "00000000000000000000111100000001", 25 => "00000000000100101111001000000000", 26 => "00001011000000000000000011110101", 27 => "11100101000000000000000000000000", 
    28 => "11111110111001010000000000000000", 29 => "00000000000000000000000000000001", 30 => "00000000000010000000000000000000", 31 => "11111011111111001111000100000000", 
    32 => "11011010000000000001000100000000", 33 => "11101010000100011111010111111110", 34 => "00000000111100000000000000001010", 35 => "11110101000000000000000000000000", 
    36 => "00000000000000001110011100001011", 37 => "11101011000000101110111100010010", 38 => "00001001000010001110010000000000", 39 => "11110100111110000000000000000000", 
    40 => "00001011000001101111000011110011", 41 => "11100110111111010000000000000000", 42 => "00000010111110101111101100000000", 43 => "00000000111100001111011111100111", 
    44 => "11110101111111100000000011111000");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

