-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity MVAU_hls_1_Matrix_Vector_Activate_Batch_weights_34_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 31; 
             AddressWidth     : integer := 6; 
             AddressRange    : integer := 45
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of MVAU_hls_1_Matrix_Vector_Activate_Batch_weights_34_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "0000000000100011110100111111000", 1 => "1001000111101110001010000001100", 2 => "0000000000000000001111100000000", 3 => "1010100111101000000001111100010", 
    4 => "0000010000000001111000011111000", 5 => "0010001000110000000010011111011", 6 => "1011011000110011111010111110110", 7 => "0000000000110110000000011110011", 
    8 => "0001000000000000000000000010111", 9 => "1100101111001010000000000000000", 10 => "1111110000000000001010100000000", 11 => "0010010000000000000001100000000", 
    12 => "1110001000111110000000000000000", 13 => "0001011111101100000000000001111", 14 => "1100000111011010000011000000000", 15 => "0000000000000001111000000000000", 
    16 => "1011011000001010001011000110000", 17 => "1101101001011110001000000000000", 18 => "1011110000000100001101111110011", 19 => "1100000000001010000111011100101", 
    20 => "0000000000000000000001111110101", 21 => "0000000000000001111111011100101", 22 => "0000000000000000000110011110111", 23 => "1110100000000000000000000000011", 
    24 => "1010010110110110000000000000000", 25 => "0000000000000100000000100000000", 26 => "0000110111110100000000000010011", 27 => "1110101000111101110111000000001", 
    28 => "0000000000000001111010000000000", 29 => "1100100111011000000000000000000", 30 => "1111001000000000000010000000000", 31 => "0000000000000000000000000011000", 
    32 => "0010111000100000010001100000000", 33 => "0000000000000001110010011100111", 34 => "1010101000000001110000111111100", 35 => "0001010000000000000000000000000", 
    36 => "0000000111110100000000000000000", 37 => "1101110000000000001001011111011", 38 => "1100000000000000000000000000000", 39 => "1101101111001001111000011111101", 
    40 => "1110100000000000000000000000000", 41 => "0000000000000000000100000010010", 42 => "0000000000100011111101100000011", 43 => "0000000111010111101101100000000", 
    44 => "0000000111010100001011000000000");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

