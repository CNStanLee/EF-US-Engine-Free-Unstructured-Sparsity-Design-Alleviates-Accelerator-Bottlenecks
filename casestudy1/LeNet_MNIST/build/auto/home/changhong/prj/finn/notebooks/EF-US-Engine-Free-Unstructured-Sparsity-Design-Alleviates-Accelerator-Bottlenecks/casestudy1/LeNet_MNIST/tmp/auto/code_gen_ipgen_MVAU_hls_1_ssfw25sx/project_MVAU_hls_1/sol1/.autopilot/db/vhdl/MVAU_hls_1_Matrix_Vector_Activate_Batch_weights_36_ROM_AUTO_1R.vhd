-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity MVAU_hls_1_Matrix_Vector_Activate_Batch_weights_36_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 31; 
             AddressWidth     : integer := 6; 
             AddressRange    : integer := 45
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of MVAU_hls_1_Matrix_Vector_Activate_Batch_weights_36_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "0000000000110000000000000010110", 1 => "0000000000000001111100111100010", 2 => "0011011111011111110100000000000", 3 => "0000000000000000000000000000000", 
    4 => "0011101001001001110010100000000", 5 => "1111100000000000000000000010000", 6 => "0010011111100100000000011100110", 7 => "1111011111100001101011000010011", 
    8 => "0000000000001100001000100000100", 9 => "0000000001001011101001100000000", 10 => "0000000000100100000000000000101", 11 => "0001110000000000001011011111011", 
    12 => "1111000111101111101101100000000", 13 => "0000000000000000000110100000000", 14 => "0000000000110011111111000000111", 15 => "0000000110101111110101100000000", 
    16 => "0010111000100000000000000000000", 17 => "1111111000000001110101000010110", 18 => "1110100111101110000000011101011", 19 => "0000000000011011110110011100111", 
    20 => "1101011000000000000000000000000", 21 => "0000000110111110000000011110011", 22 => "0001001111110011110101111100011", 23 => "0000000000000000000000000000000", 
    24 => "0000010001000000000000000000000", 25 => "1110010000000000000100100000000", 26 => "0000000111111000000000011110100", 27 => "0000000000000001110100000001000", 
    28 => "0000000000000000000000000000000", 29 => "0001100000101001111000000010010", 30 => "0000000000100110000101100001001", 31 => "1101001000000000000011100100100", 
    32 => "0000000000111100000000000001110", 33 => "0000000000000000001011000000000", 34 => "1110100110111000000000000000110", 35 => "0000000000000000000000000000000", 
    36 => "1011110000000001111110011111001", 37 => "0000000000010100000000000000000", 38 => "1100100000000000001011100000000", 39 => "1111111110110011110111000001110", 
    40 => "0000000111000100000000011011111", 41 => "1111000000011100000000000000000", 42 => "1101101000011100000000000000000", 43 => "0001000000001100001110100010010", 
    44 => "0000000111111110000111100000000");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

