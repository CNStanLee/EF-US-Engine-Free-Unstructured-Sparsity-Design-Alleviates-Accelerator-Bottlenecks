-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity MVAU_hls_1_Matrix_Vector_Activate_Batch_weights_7_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 32; 
             AddressWidth     : integer := 6; 
             AddressRange    : integer := 45
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of MVAU_hls_1_Matrix_Vector_Activate_Batch_weights_7_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "00000000000000000000011011110001", 1 => "00000000000000000000000000011001", 2 => "11100110000000000010000000000000", 3 => "00000000000000000000000000000101", 
    4 => "00101011000000000010101000000000", 5 => "00000010000000000000000000000000", 6 => "00000000111110001101010100001010", 7 => "10111110000010110000000000001101", 
    8 => "00001110000000001111101000000000", 9 => "00000000001001010000101100000101", 10 => "00001101000000000000000000000000", 11 => "11101010000000001110111100001011", 
    12 => "00000000111111000000000011111111", 13 => "11100100000000000001100000000000", 14 => "00000000111001101110110100000000", 15 => "00000000111010001111011011111010", 
    16 => "11100111000000001111110000011110", 17 => "00000000000000000000000000110010", 18 => "00000000000000000010001100000000", 19 => "00000000000000000000000011110111", 
    20 => "00000000000000000000100100000000", 21 => "00000000000110111101110111110000", 22 => "00000000111100011101001000001011", 23 => "00000000000000000000000011110001", 
    24 => "00101011000001100000010000011011", 25 => "00000000000000001111010000000000", 26 => "11101110000000001110011111110001", 27 => "11110110111111000001010100000000", 
    28 => "00000111111011100000000011110110", 29 => "00000100001000101111011100010011", 30 => "00000000000001110000110000010110", 31 => "00000000000000001100000100000000", 
    32 => "11100100000000001101100000001110", 33 => "00000000000000000000000000000000", 34 => "00000000001101111110010000011001", 35 => "00000001000000000000000000000000", 
    36 => "00001010000000001110100100000000", 37 => "11111000000000001101100100010000", 38 => "00000000111010010001011011110101", 39 => "00001111000000001111111011110001", 
    40 => "11111111000000000000000000000000", 41 => "00010000000000001110100011111011", 42 => "00010001000000000000000000000000", 43 => "00001110111011010000101100001100", 
    44 => "00011000000111110000000000000000");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

