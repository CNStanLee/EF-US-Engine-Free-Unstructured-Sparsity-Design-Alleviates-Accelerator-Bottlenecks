-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity MVAU_hls_1_Matrix_Vector_Activate_Batch_weights_15_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 31; 
             AddressWidth     : integer := 6; 
             AddressRange    : integer := 45
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of MVAU_hls_1_Matrix_Vector_Activate_Batch_weights_15_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "0010110111001010000011000000000", 1 => "0000100000111111110101011111010", 2 => "0000100000000000001001100000000", 3 => "0000000000000000000011011111100", 
    4 => "1101011111101010000000000000000", 5 => "0000000000000000000000000011101", 6 => "1111101000000001110111000010100", 7 => "0001001000100000000000000000000", 
    8 => "0000000000000000000000000000000", 9 => "1101101110101110000000000010111", 10 => "0000000111001001101110011011101", 11 => "1001100000000000000000000000101", 
    12 => "0000100000010011111110000000000", 13 => "1010100000010000001101100000000", 14 => "1110110110111011111111011100111", 15 => "0001111000000000000000000000101", 
    16 => "0011010000000000000000011101011", 17 => "1011101000000000000100011111000", 18 => "0000000000000100000101000000000", 19 => "0000000000000001111010100000000", 
    20 => "0000000000000000000000000000000", 21 => "0000000111111101111110100000000", 22 => "1101111000000001111001000000000", 23 => "0000000000011110000000000000000", 
    24 => "1110110000101010000000000000000", 25 => "1100000000000000000000000000000", 26 => "1111101000000000000011000011011", 27 => "0000000000000001111101100000000", 
    28 => "1011011000000000000000000000000", 29 => "1100110111110111101000100011000", 30 => "0000110000000001110101011110010", 31 => "1111111000000000000000000000000", 
    32 => "0000000111011001111000011110000", 33 => "0001111110011001101110000000000", 34 => "1111000000000001111100011100011", 35 => "1110111000011010000000000000000", 
    36 => "0001001111010111111101011010110", 37 => "0000000000000000000101111111100", 38 => "0000000000000001111001111101101", 39 => "0010010000110111111101100000110", 
    40 => "0001101000101110001000000010111", 41 => "0010000000110011111101011100001", 42 => "0000100111111111110110100000000", 43 => "0000000000000001111000111110010", 
    44 => "0000000000000000000000000000000");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

